@startuml

    class "Explanation of the symbols used" as DESCRIPTION #FFF {
    - AutoField (identifiers)
    ..
    + Regular field (anything)
    ..
    # ForeignKey (ManyToMany)
    ..
    ~ ForeignKey (OneToOne, OneToMany)
    --
}


class "admin.LogEntry <Administration>" as admin.LogEntry #f4d6f1 {
    log entry
    ..
    LogEntry(id, action_time, user, content_type, object_id, object_repr,
action_flag, change_message)
    --
    - id (AutoField) - 
    + action_time (DateTimeField) - 
    ~ user (ForeignKey) - 
    ~ content_type (ForeignKey) - 
    + object_id (TextField) - 
    + object_repr (CharField) - 
    + action_flag (PositiveSmallIntegerField) - 
    + change_message (TextField) - 
    --
}
admin.LogEntry *-- register.User
admin.LogEntry *-- contenttypes.ContentType


class "sessions.Session <Sessions>" as sessions.Session #f4e1d6 {
    session
    ..
    Django provides full support for anonymous sessions. The session
    framework lets you store and retrieve arbitrary data on a
    per-site-visitor basis. It stores data on the server side and
    abstracts the sending and receiving of cookies. Cookies contain a
    session ID -- not the data itself.
    The Django sessions framework is entirely cookie-based. It does
    not fall back to putting session IDs in URLs. This is an intentional
    design decision. Not only does that behavior make URLs ugly, it makes
    your site vulnerable to session-ID theft via the "Referer" header.
    For complete documentation on using Sessions in your code, consult
    the sessions documentation that is shipped with Django (also available
    on the Django Web site).
    --
    + session_key (CharField) - 
    + session_data (TextField) - 
    + expire_date (DateTimeField) - 
    --
}


class "auth.Permission <Authentication and Authorization>" as auth.Permission #e8f4d6 {
    permission
    ..
    The permissions system provides a way to assign permissions to specific
    users and groups of users.
    The permission system is used by the Django admin site, but may also be
    useful in your own code. The Django admin site uses permissions as follows:
        - The "add" permission limits the user's ability to view the "add" form
          and add an object.
        - The "change" permission limits a user's ability to view the change
          list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.
        - The "view" permission limits the ability to view an object.
    Permissions are set globally per type of object, not per specific object
    instance. It is possible to say "Mary may change news stories," but it's
    not currently possible to say "Mary may change news stories, but only the
    ones she created herself" or "Mary may only change news stories that have a
    certain status or publication date."
    The permissions listed above are automatically created for each model.
    --
    - id (AutoField) - 
    + name (CharField) - 
    ~ content_type (ForeignKey) - 
    + codename (CharField) - 
    --
}
auth.Permission *-- contenttypes.ContentType


class "auth.Group <Authentication and Authorization>" as auth.Group #e8f4d6 {
    group
    ..
    Groups are a generic way of categorizing users to apply permissions, or
    some other label, to those users. A user can belong to any number of
    groups.
    A user in a group automatically has all the permissions granted to that
    group. For example, if the group 'Site editors' has the permission
    can_edit_home_page, any user in that group will have that permission.
    Beyond permissions, groups are a convenient way to categorize users to
    apply some label, or extended functionality, to them. For example, you
    could create a group 'Special users', and you could write code that would
    do special things to those users -- such as giving them access to a
    members-only portion of your site, or sending them members-only email
    messages.
    --
    - id (AutoField) - 
    + name (CharField) - 
    # permissions (ManyToManyField) - 
    --
}
auth.Group *--* auth.Permission


class "contenttypes.ContentType <Content Types>" as contenttypes.ContentType #d6f4de {
    content type
    ..
    ContentType(id, app_label, model)
    --
    - id (AutoField) - 
    + app_label (CharField) - 
    + model (CharField) - 
    --
}


class "gis.PostGISGeometryColumns <GIS>" as gis.PostGISGeometryColumns #e8f4d6 {
    post gis geometry columns
    ..
    The 'geometry_columns' view from PostGIS. See the PostGIS
    documentation at Ch. 4.3.2.
    --
    + f_table_catalog (CharField) - 
    + f_table_schema (CharField) - 
    + f_table_name (CharField) - 
    + f_geometry_column (CharField) - 
    + coord_dimension (IntegerField) - 
    + srid (IntegerField) - 
    + type (CharField) - 
    --
}


class "gis.PostGISSpatialRefSys <GIS>" as gis.PostGISSpatialRefSys #e8f4d6 {
    post gis spatial ref sys
    ..
    The 'spatial_ref_sys' table from PostGIS. See the PostGIS
    documentation at Ch. 4.2.1.
    --
    + srid (IntegerField) - 
    + auth_name (CharField) - 
    + auth_srid (IntegerField) - 
    + srtext (CharField) - 
    + proj4text (CharField) - 
    --
}


class "home.Posts <Home>" as home.Posts #efd6f4 {
    posts
    ..
    Posts(id, user, image, title, desc)
    --
    - id (AutoField) - 
    ~ user (ForeignKey) - 
    + image (ImageField) - 
    + title (CharField) - 
    + desc (CharField) - 
    --
}
home.Posts *-- register.User


class "home.Profile <Home>" as home.Profile #efd6f4 {
    profile
    ..
    Profile(id, user, image, tags, bio, dob, location)
    --
    - id (AutoField) - 
    ~ user (ForeignKey) - 
    + image (ImageField) - 
    + tags (ArrayField) - 
    + bio (TextField) - 
    + dob (DateField) - 
    + location (PointField) - 
    --
}
home.Profile *-- register.User


class "register.User <Register>" as register.User #f4d6ec {
    user
    ..
    User(id, password, last_login, is_superuser, email, username, first_name,
last_name, is_staff, is_active, date_joined)
    --
    - id (AutoField) - 
    + password (CharField) - 
    + last_login (DateTimeField) - 
    + is_superuser (BooleanField) - Designates that this user has all permissions
without explicitly assigning them.
    + email (EmailField) - 
    + username (CharField) - 
    + first_name (CharField) - 
    + last_name (CharField) - 
    + is_staff (BooleanField) - Designates whether the user can log into this admin
site.
    + is_active (BooleanField) - Designates whether this user should be treated as
active. Unselect this instead of deleting accounts.
    + date_joined (DateTimeField) - 
    # groups (ManyToManyField) - The groups this user belongs to. A user will get
all permissions granted to each of their groups.
    # user_permissions (ManyToManyField) - Specific permissions for this user.
    --
}
register.User *--* auth.Group
register.User *--* auth.Permission


class "event.Events <Event>" as event.Events #f4d6df {
    events
    ..
    Events(id, host, title, image, tags, desc, create_date, event_date, location,
addr, max_attendees)
    --
    - id (AutoField) - 
    ~ host (ForeignKey) - 
    + title (CharField) - 
    + image (ImageField) - 
    + tags (ArrayField) - 
    + desc (TextField) - 
    + create_date (DateField) - 
    + event_date (DateField) - 
    + location (PointField) - 
    + addr (TextField) - 
    + max_attendees (IntegerField) - 
    # attendees (ManyToManyField) - 
    # invites_sent (ManyToManyField) - 
    --
}
event.Events *-- register.User
event.Events *--* register.User
event.Events *--* register.User


class "oauth2_provider.Application <Django OAuth Toolkit>" as oauth2_provider.Application #f4dad6 {
    application
    ..
    Application(id, client_id, user, redirect_uris, client_type,
authorization_grant_type, client_secret, name, skip_authorization, created,
updated, algorithm)
    --
    + id (BigAutoField) - 
    + client_id (CharField) - 
    ~ user (ForeignKey) - 
    + redirect_uris (TextField) - Allowed URIs list, space separated
    + client_type (CharField) - 
    + authorization_grant_type (CharField) - 
    + client_secret (CharField) - 
    + name (CharField) - 
    + skip_authorization (BooleanField) - 
    + created (DateTimeField) - 
    + updated (DateTimeField) - 
    + algorithm (CharField) - 
    --
}
oauth2_provider.Application *-- register.User


class "oauth2_provider.Grant <Django OAuth Toolkit>" as oauth2_provider.Grant #f4dad6 {
    grant
    ..
    Grant(id, user, code, application, expires, redirect_uri, scope, created,
updated, code_challenge, code_challenge_method, nonce, claims)
    --
    + id (BigAutoField) - 
    ~ user (ForeignKey) - 
    + code (CharField) - 
    ~ application (ForeignKey) - 
    + expires (DateTimeField) - 
    + redirect_uri (TextField) - 
    + scope (TextField) - 
    + created (DateTimeField) - 
    + updated (DateTimeField) - 
    + code_challenge (CharField) - 
    + code_challenge_method (CharField) - 
    + nonce (CharField) - 
    + claims (TextField) - 
    --
}
oauth2_provider.Grant *-- register.User
oauth2_provider.Grant *-- oauth2_provider.Application


class "oauth2_provider.AccessToken <Django OAuth Toolkit>" as oauth2_provider.AccessToken #f4dad6 {
    access token
    ..
    AccessToken(id, user, source_refresh_token, token, id_token, application,
expires, scope, created, updated)
    --
    + id (BigAutoField) - 
    ~ user (ForeignKey) - 
    ~ source_refresh_token (OneToOneField) - 
    + token (CharField) - 
    ~ id_token (OneToOneField) - 
    ~ application (ForeignKey) - 
    + expires (DateTimeField) - 
    + scope (TextField) - 
    + created (DateTimeField) - 
    + updated (DateTimeField) - 
    --
}
oauth2_provider.AccessToken *-- register.User
oauth2_provider.AccessToken *-- oauth2_provider.Application


class "oauth2_provider.RefreshToken <Django OAuth Toolkit>" as oauth2_provider.RefreshToken #f4dad6 {
    refresh token
    ..
    RefreshToken(id, user, token, application, access_token, created, updated,
revoked)
    --
    + id (BigAutoField) - 
    ~ user (ForeignKey) - 
    + token (CharField) - 
    ~ application (ForeignKey) - 
    ~ access_token (OneToOneField) - 
    + created (DateTimeField) - 
    + updated (DateTimeField) - 
    + revoked (DateTimeField) - 
    --
}
oauth2_provider.RefreshToken *-- register.User
oauth2_provider.RefreshToken *-- oauth2_provider.Application


class "oauth2_provider.IDToken <Django OAuth Toolkit>" as oauth2_provider.IDToken #f4dad6 {
    id token
    ..
    IDToken(id, user, jti, application, expires, scope, created, updated)
    --
    + id (BigAutoField) - 
    ~ user (ForeignKey) - 
    + jti (UUIDField) - 
    ~ application (ForeignKey) - 
    + expires (DateTimeField) - 
    + scope (TextField) - 
    + created (DateTimeField) - 
    + updated (DateTimeField) - 
    --
}
oauth2_provider.IDToken *-- register.User
oauth2_provider.IDToken *-- oauth2_provider.Application


class "social_django.UserSocialAuth <Python Social Auth>" as social_django.UserSocialAuth #d6e9f4 {
    user social auth
    ..
    Social Auth association model
    --
    - id (AutoField) - 
    ~ user (ForeignKey) - 
    + provider (CharField) - 
    + uid (CharField) - 
    + extra_data (JSONField) - 
    + created (DateTimeField) - 
    + modified (DateTimeField) - 
    --
}
social_django.UserSocialAuth *-- register.User


class "social_django.Nonce <Python Social Auth>" as social_django.Nonce #d6e9f4 {
    nonce
    ..
    One use numbers
    --
    - id (AutoField) - 
    + server_url (CharField) - 
    + timestamp (IntegerField) - 
    + salt (CharField) - 
    --
}


class "social_django.Association <Python Social Auth>" as social_django.Association #d6e9f4 {
    association
    ..
    OpenId account association
    --
    - id (AutoField) - 
    + server_url (CharField) - 
    + handle (CharField) - 
    + secret (CharField) - 
    + issued (IntegerField) - 
    + lifetime (IntegerField) - 
    + assoc_type (CharField) - 
    --
}


class "social_django.Code <Python Social Auth>" as social_django.Code #d6e9f4 {
    code
    ..
    Code(id, email, code, verified, timestamp)
    --
    - id (AutoField) - 
    + email (EmailField) - 
    + code (CharField) - 
    + verified (BooleanField) - 
    + timestamp (DateTimeField) - 
    --
}


class "social_django.Partial <Python Social Auth>" as social_django.Partial #d6e9f4 {
    partial
    ..
    Partial(id, token, next_step, backend, data, timestamp)
    --
    - id (AutoField) - 
    + token (CharField) - 
    + next_step (PositiveSmallIntegerField) - 
    + backend (CharField) - 
    + data (JSONField) - 
    + timestamp (DateTimeField) - 
    --
}


@enduml
